
/*
Name:		securitySystem2.ino
Created:	9/21/2018 1:12:20 PM
Author:	Kirby
The purpose of this program is to run an arduino based security system.
At this point it is just to test concepts.
An ultrasonic transciever is hooked up to a breadboard along with a passive buzzer and two LED's which are red and green.
Under normal circumstances, the green light will be on along with the ultrasonic sensor.
Should the sensor determine that an object is within a certain proximity, the light switches from red to green.
If it gets even closer, past a second predetermined point, the red light remains on and the buzzer sounds.
@@ -16,70 +16,74 @@ As you back away, the process is reversed, first switching the buzzer off follow
The order which the previous items are connected to the breadboard is arbitrary at this point.
*/
//buzzer pin connection
int buzzer = 10;
//ultrasonic sensor pin connections
int trigPin = 3; //trigPin is the "transmission" pin
int echoPin = 4; //echoPin is the "reception" pin

//indicator lights
const int greenLED = 5;
const int redLED = 6;

//used to calculate distance
float duration = 0.0;
float distance = 0.0;

//number of readings that we want for an average
const int numReadings = 10;

//used to calculate the total duration and the average duration
float totalDuration = 0.0;
float averageDuration = 0.0;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------
// the setup function runs once when you press reset or power the board
void setup()
{
	//initialize serial comminications with computer
	Serial.begin(9600);
	Serial.println("SECURITY SYSTEM");
	Serial.println("initializing...");

	//Setting the pin modes
	pinMode(buzzer, OUTPUT);
	pinMode(trigPin, OUTPUT);
	pinMode(echoPin, INPUT);
	pinMode(greenLED, OUTPUT);
	pinMode(redLED, OUTPUT);

	//initializing the ultrasonic module (transmission "OFF")
	digitalWrite(trigPin, LOW);
	//initializing the LEDs (Green LED ON, Red LED Off)
	digitalWrite(greenLED, HIGH);
	digitalWrite(redLED, LOW);

	//initializing the buzzer (OFF)
	digitalWrite(buzzer, LOW);
	delay(1000);
	Serial.println("Setup Completed");
}

// the loop function runs over and over again until power down or reset
void loop()
{
	getDistance(numReadings);

	// do something different depending on the distance value:
	if (distance > 200.0)
	{
		Serial.println("Good");
		digitalWrite(greenLED, HIGH);
		digitalWrite(redLED, LOW);
	}
	else if (distance < 200.0 && distance > 100.0)
	{
		Serial.println("Medium");
		digitalWrite(greenLED, HIGH);
		digitalWrite(redLED, HIGH);
	}
	else if (distance < 100.0 && distance > 30.0)
	{
		Serial.println("Bad");
		digitalWrite(greenLED, LOW);
		digitalWrite(redLED, HIGH);
	}
	else if (distance < 30.0 && distance > 0.0)
	{
		Serial.println("Alarm");
		digitalWrite(greenLED, LOW);
		digitalWrite(redLED, HIGH);
		alarm();
	}
	else
	{
		Serial.println("Range undefined");
	}
}


//function getDistance, only has 1 argument of type integer called _numReadings
//_numReadings is used to measure the distance over x amount of times.
//
// Ex: if you call the function like this
//
//	getDistance(5);
//  It will transmit 5 times then display the average distance

void getDistance(int _numReadings)
{
	//will do what is in the For Loop for 10 cycles (10 comes from the variable numReadings)
	for (int x = 0; x < _numReadings; x++)
	{
		//making sure that the trigPin is Off before we start transmitting.
		digitalWrite(trigPin, LOW);
		delayMicroseconds(2);
		//transmitting a pulse for 10 microseconds
		digitalWrite(trigPin, HIGH);
		delayMicroseconds(10);
		//turn off the transmitter
		digitalWrite(trigPin, LOW);


		//measuring the return pulse
		duration = pulseIn(echoPin, HIGH);


		//Add the current duration to the variable "total" (total will be increasing every cycle of the For Loop).
		totalDuration = totalDuration + duration;
	}
	//Once the 10 cycles in the loop are done, the average is calculated from the variable totalDuration.
	averageDuration = totalDuration / _numReadings;

	//calculate the average distance (in cm) based on the speed of sound
	distance = averageDuration * 0.0343 / 2;

	//display reading in serial monitor
	Serial.println(String(distance) + " cm");

	//reset all the variables
	duration = 0.0;
	averageDuration = 0.0;
	totalDuration = 0.0;

	//short delay
	delay(50);
}

void alarm()
{
	//alarm silencing button
	int buttonState = 2;
	tone(buzzer, 256);
	if (buttonState = true)
	{
		return;
	}
	else
	{
		delay(10000000000000);
		return;
	}
}
